//Union find default code

class DSU {
public:
    int n;
    int components;
    vector<int> parent;
    vector<int> rank;
    
    DSU(int n) : n(n), components(n), parent(n), rank(n, 0) {
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
    }

    int find(int u) {
        if (u == parent[u])
            return u;
        else
            return parent[u] = find(parent[u]);
    }

    void Union(int u, int v) {
        int u_parent = find(u);
        int v_parent = find(v);
        if (u_parent == v_parent) {
            return;
        } else {
            if (rank[u_parent] == rank[v_parent]) {
                parent[v_parent] = u_parent;
                rank[u_parent] += 1;
            } else if (rank[u_parent] < rank[v_parent]) {
                parent[u_parent] = v_parent;
            } else {
                parent[v_parent] = u_parent;
            }
        }
        components--;
    }

    bool isSingleComponentLeft() {
        return components == 1;
    }
};
